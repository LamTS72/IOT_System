#include "dh11.h"


uint8_t cmd_flag = 1;//C;
uint8_t dht11_data[5];
float humidity;
float temp_C;
float temp_F;
int8_t Response = 0;
char humid_buffer[20];
char temp_buffer[20];

//=========================
uint8_t buffer_byte;
uint8_t buffer[MAX_BUFFER_SIZE];
uint8_t index_buffer = 0;
uint8_t buffer_flag = 0;

int mode = INIT;
uint8_t cmd_data[MAX_CMD_SIZE];
uint8_t cmd_data_index = 0;
uint8_t request_flag = 0;
uint8_t request_check = 0;

int isC(uint8_t str[]){
	if (str[0] == '1' && str[1] == 'S' && str[2] == 'C')
		return 1;
	else
		return 0;
}

int isF(uint8_t str[]){
	if (str[0] == '2' && str[1] == 'S' && str[2] == 'F')
		return 1;
	else
		return 0;
}

void cmd_parser_fsm(){
	if(buffer_flag == 1){
		switch(mode){
				case INIT:
					if (buffer_byte == '!') {
						mode = QUEUING;
					}
					break;
				case QUEUING:
					if (buffer_byte != '!' && buffer_byte != '#'){
						cmd_data[cmd_data_index] = buffer_byte;
						cmd_data_index++;
					}
					if (buffer_byte == '#') {
						mode = SERVING;
						cmd_data_index = 0;
					}
					break;
				case SERVING:
					if (isC(cmd_data)==1){
						cmd_flag = 1;
						request_check = 0;
					}
					else if (isF(cmd_data)==1){
						cmd_flag = 0;
						request_check = 0;
					}
					else{
						request_check = 1;
					}
					request_flag = 1;
					mode = INIT;
					break;
				default:
					break;
		}
		buffer_flag = 0;
	}

}

void cmd_check_request(){
	char str[50];
	if(request_flag == 1){
		request_flag = 0;
		if(request_check == 1){
			HAL_UART_Transmit(&huart2,(void *)str, sprintf(str, "Request:ERROR\r\n"), sizeof(str));
		}
		else{
			HAL_UART_Transmit(&huart2,(void *)str, sprintf(str, "Request:OK\r\n"), sizeof(str));
		}
	}
}



void Send_Info(void){
	char str[50];
	if(cmd_flag == 1){
		HAL_UART_Transmit(&huart2,(void *)str, sprintf(str, "!1:T:%.1f:C#!2:H:%.1f:%%#\r\n",temp_C,humidity), sizeof(str));
	}
	else if(cmd_flag == 0) {
		HAL_UART_Transmit(&huart2,(void *)str, sprintf(str, "!1:T:%.1f:F#!2:H:%.1f:%%#\r\n",temp_F,humidity), sizeof(str));
	}

}

void Set_Pin_Output (GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
	GPIO_InitTypeDef GPIO_InitStruct = {0};
	GPIO_InitStruct.Pin = GPIO_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
}

void Set_Pin_Input (GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
	GPIO_InitTypeDef GPIO_InitStruct = {0};
	GPIO_InitStruct.Pin = GPIO_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
}

void DHT11_Start(void){
	 Set_Pin_Output(DH11_GPIO_Port,DH11_Pin);
	 HAL_GPIO_WritePin(DH11_GPIO_Port,DH11_Pin, RESET);  // pull the pin low
	 delay_us(18000);  // wait for at least 18ms
	 HAL_GPIO_WritePin(DH11_GPIO_Port,DH11_Pin, SET);    // pull the pin high
	 delay_us(20);     // wait for 20-40us
	 Set_Pin_Input(DH11_GPIO_Port,DH11_Pin);
}
uint8_t DHT11_Check_Response(void){
	uint8_t response = 0;
	delay_us(40);
	if (!(HAL_GPIO_ReadPin(DH11_GPIO_Port,DH11_Pin))){  // wait for the pin to go low
		delay_us(80);
	    if ((HAL_GPIO_ReadPin(DH11_GPIO_Port,DH11_Pin))){ // check if the pin is high
	    	response = 1;
	    }
	}
	while ((HAL_GPIO_ReadPin(DH11_GPIO_Port,DH11_Pin)));  // wait for the pin to go low again
	return response;
}
uint8_t DHT11_Read_Byte(void){
    uint8_t i, result = 0;
    for (i = 0; i < 8; i++){
        while (!(HAL_GPIO_ReadPin(DH11_GPIO_Port,DH11_Pin)));  // wait for the pin to go high
        delay_us(40);  // wait for 40us
        if ((HAL_GPIO_ReadPin(DH11_GPIO_Port,DH11_Pin)) == 0){ // check if the pin is low
            result &= ~(1 << (7 - i));  // clear bit (7 - i)
        }
        else{
            result |= (1 << (7 - i));   // set bit (7 - i)
        }
        while ((HAL_GPIO_ReadPin(DH11_GPIO_Port,DH11_Pin)));  // wait for the pin to go low again
    }
    return result;
}

void Read_from_DHT11(void){
	DHT11_Start();

	uint8_t try_time = 0;

	Response =  DHT11_Check_Response();

	while(Response == -1 && try_time < 3)
	{
		DHT11_Start();

		Response = DHT11_Check_Response();

		try_time++;
	}

	if(try_time < 3)
	{
		for (uint8_t i = 0; i < 5; i++)
		{
			dht11_data[i] = DHT11_Read_Byte();
		}
	}
}

void Display_Data_from_DHT11(void){
	if(Response != -1){
		humidity = (float)dht11_data[0] + (float)dht11_data[1]/10;
		temp_C = (float)dht11_data[2] + (float)dht11_data[3]/10;
		temp_F = temp_C * 1.8;
		lcd_clear();
		lcd_put_cur(0,0);
		sprintf(humid_buffer,"Humidity: %.1f%%",humidity);
		lcd_send_string(humid_buffer);
		lcd_put_cur(1,0);
		if(cmd_flag == 1){
			sprintf(temp_buffer,"Temp: %.1f%cC",temp_C,223 );
			lcd_send_string(temp_buffer);
		}
		else if (cmd_flag == 0){
			sprintf(temp_buffer,"Temp: %.1f%cF",temp_F,223 );
			lcd_send_string(temp_buffer);
		}
	}
	else{
		lcd_clear();
		lcd_send_string("Not responsive");
	}

}
